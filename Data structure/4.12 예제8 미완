#include <stdio.h>

typedef struct LinkedNode {
	double coef;
	int expo;
	struct LinkedNode* next;
}Term;

typedef struct LinkedList {
	struct LinkedNode* head;
}Polynomia1;

Polynomia1* createPolynomia1()
{
	Polynomia1* P = (Polynomia1*)malloc(sizeof(Polynomia1));
	if (P == NULL) return NULL;
	P->head = NULL;
	return P;
}

Term* createTerm(int expo, double coef)
{
	Term* N = (Term*)malloc(sizeof(Term));
	if (N == NULL) return NULL;
	N->expo = expo;
	N->coef = coef;
	N->next = NULL;
	return N;
}

void appendTerm(Polynomia1* L, int E, double C)
{
	Term* N = createTerm(E, C);
	Term* p;
	if (L->head == NULL) {
		L->head = N; return;
	}
	else{
		p = L->head;
		while (p->next != NULL) p = p->next;
		p->next = N;
	}
}

void printPolynomia1(Polynomia1* L)
{
	if (L->head == NULL) return;
	Term* p = L->head;
	while (p != NULL) {
		printf("%lf^%d\n", p->coef, p->expo);
		p = p->next;
	}
}


Polynomia1* addPolynomial(Polynomia1* P1, Polynomia1* P2)
{
	Polynomia1* P3 = (Polynomia1*)malloc(sizeof(Polynomia1));
	//다항식 덧셈 구현

	return P3;
}
