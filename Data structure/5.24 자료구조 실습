#include <stdio.h>
typedef	int ElementType;
typedef struct BSTNode {
	ElementType data;
	struct BSTNode* left;
	struct BSTNode* right;
} Node;

Node* BST_CreateNode(ElementType newData) {
	Node* newNode = (Node*)malloc(sizeof(Node));
	if (newNode == NULL) return NULL;
	else {
		newNode->data = newData;
		newNode->left = NULL, newNode->right = NULL;
		return newNode;
	}
}
void BST_DestroyTree(Node* node){
	free(node);
	}
void BST_DestroyTree(Node* tree) {
	if (tree->right != NULL) return NULL;
	if (tree->left != NULL) BST_DestroyTree(tree->left);
	tree->left = NULL;
	tree->right = NULL;
	BST_DestroyTree(tree);
}

Node* BST_SearchNode(Node* tree, ElementType searchData) {
	if (tree == NULL) return NULL;
	if (tree->data < searchData) return BST_SearchNode(tree->left, searchData);
	else if (tree->data > searchData) return BST_SearchNode(tree->right, searchData);
	else return tree;
}

Node* BST_SearchMinNode(Node* tree) {
	if (tree == NULL) return NULL;
	if (tree->data == NULL) return tree;
	else return BST_SearchMinNode(tree->left);
}


void BST_InsertNode(Node* tree, Node* childNode) {
	if (tree->data < childNode->data) {
		if (tree->right == NULL) tree->right = childNode;
		else BST_InsertNode(tree->right, childNode);
	}
	else if (tree->data > childNode->data) {
		if (tree->left == NULL) tree->left = childNode;
		else BST_InsertNode(tree->left, childNode);
	}
}
Node* BST_DeleteNode(Node* tree, Node* parent, ElementType targetData) {
	Node* removeNode = NULL;
	if (tree == NULL) return NULL;
	if (tree->data > targetData) removeNode = BST_DeleteNode(tree->left, tree, targetData);
	else if (tree->data < targetData) removeNode = BST_DeleteNode(tree->right, tree, targetData);
	else {
		removeNode = tree;
		if (tree->left == NULL && tree->right == NULL) {
			if (parent->left == tree) parent->left = NULL;
			else parent->right = NULL;
		}
		else {
			if (tree->left != NULL && tree->right != NULL) {
				Node* minNode = BST_SearchMinNode(tree->right);
				minNode = BST_DeleteNode(tree, NULL, minNode->data);
				tree->data = minNode->data;
			}
			else {
				Node* temp = NULL;
				if (tree->left != NULL) temp = tree->left;
				else temp = tree->right;
				if (parent->left == tree) parent->left = temp;
				else parent->right = temp;
			}
		}
	}
	return removeNode;
}

void BST_InorderPrintTree(Node* node) {
	if (node == NULL) return;
	BST_InorderPrintTree(node->left);
	printf("%d", node->data);
	BST_InorderPrintTree(node->right);
}

int main(void) {
	Node* T = BST_CreateNode(123);
	Node* N = NULL;
	BST_InsertNode(T, BST_CreateNode(22));
	BST_InsertNode(T, BST_CreateNode(99));
	BST_InsertNode(T, BST_CreateNode(42));
	BST_InsertNode(T, BST_CreateNode(17));
	BST_InsertNode(T, BST_CreateNode(3));
	BST_InsertNode(T, BST_CreateNode(98));
	BST_InsertNode(T, BST_CreateNode(34));
	BST_InsertNode(T, BST_CreateNode(76));
	BST_InsertNode(T, BST_CreateNode(31));
	BST_InsertNode(T, BST_CreateNode(1));
	BST_InorderPrintTree(T);
	printf("\n"); getchar();
	printf("Removing 98...\n");
	N = BST_DeleteNode(T, NULL, 98);
	BST_InorderPrintTree(T);
	printf("\n"); getchar();
	BST_DestroyTree(T);
	return 0;
}
